generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId 
  email     String    @unique
  name      String?
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  invoices  Invoice[]
}

model Invoice {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId 
  status        InvoiceStatus  @default(draft)
  description   String
  clientName    String
  clientEmail   String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  paymentDue    DateTime
  paymentTerms  Int
  clientAddress ClientAddress? 
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @unique     @db.ObjectId
  items         Json
  senderAddress SenderAddress?
  total         Float
}


model SenderAddress {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  street    String
  city      String
  postCode  String
  country   String
  invoiceId String  @unique @db.ObjectId
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model ClientAddress {
   id          String  @id @default(auto()) @map("_id") @db.ObjectId
  street    String
  city      String
  postCode  String
  country   String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String  @unique  @db.ObjectId
}



enum InvoiceStatus {
  draft
  pending
  paid
}

